#!/bin/sh
# the next line restarts using expect interpreter \
   exec expect "$0" "$@"

##!/usr/bin/expect --
#***************************************************************************
#    Copyright (C) 2011 by Michael Ambrus                                  *
#    ambrmi09@gmail.com                                                    *
#                                                                          *
#    This program is free software; you can redistribute it and/or modify  *
#    it under the terms of the GNU General Public License as published by  *
#    the Free Software Foundation; either version 2 of the License, or     *
#    (at your option) any later version.                                   *
#                                                                          *
#    This program is distributed in the hope that it will be useful,       *
#    but WITHOUT ANY WARRANTY; without even the implied warranty of        *
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
#    GNU General Public License for more details.                          *
#                                                                          *
#    You should have received a copy of the GNU General Public License     *
#    along with this program; if not, write to the                         *
#    Free Software Foundation, Inc.,                                       *
#    59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
#***************************************************************************/

##!/usr/bin/expect --

# Interactive and non-interactive translator for GDB which enables
# a "side-door"

#Uncomment any of the following below
set LOG_FNAME "/tmp/gdb_tap"
#set LOG_FNAME "/tmp/gdb_tap-[pid]"
exp_internal 0
log_user 0
exp_internal -f ${LOG_FNAME}-int.log 0
set logfile [open ${LOG_FNAME}.log "a"]

puts $logfile "gdb_tap started"; flush $logfile

#Get the GDB binary to use from the environment
set gdb_bin			$env(GDB_BIN)
set servlet_bin		tcp.server.gen.servlet.exp
set servlet_port    5555

puts $logfile "\n\n"
puts $logfile ">>> Starting GDB-wrapper with following arguments:"

set ArgS [lindex $argv 0]
set argc [llength $argv]

#puts $logfile "1: [lindex $argv 0]"
#puts $logfile "1: $ArgS"

for {set i 0} {$i < $argc} {incr i} {
	puts $logfile "[expr $i + 1]: [lindex $argv $i]"
	set ArgS "$ArgS [lindex $argv $i]"
}
puts $logfile "--------------------------------------------------------"
puts $logfile ">>> Argument string passed: $ArgS"
puts $logfile "--------------------------------------------------------"

flush $logfile

proc print2log { F T } {
	puts $F $T
	flush $F
}

#Spawning the TCP servlet
#spawn $servlet_bin -p $servlet_port
#set servlet_id $spawn_id
#puts $logfile ">>> Spawnded the TCP server: $servlet_bin / $servlet_id. Port=$servlet_port"; flush $logfile

#stty raw -echo
#stty cooked
#set stty_init -raw
#match_max 20000

		puts $logfile ">>> spawning with 2 arg"; flush $logfile
		spawn -nottyinit $gdb_bin \
			[lindex $argv 0] \
			[lindex $argv 1]

set gdb_id $spawn_id

expect "(gdb) "
send_user -raw $expect_out(buffer)

set timeout 3600
#set send_human {.1 .3 1 .05 2}
expect {
	-i "$gdb_id" -re "file \[^,]+\n" {
		print2log $logfile "### $expect_out(0,string)"
		#send -raw -i $user_spawn_id $expect_out(buffer)
		exp_continue
	}
	-i "$gdb_id" -re ".+" {
		print2log $logfile "<-- $expect_out(buffer)"
		send -i $user_spawn_id $expect_out(buffer)
		exp_continue
	}
	-i "$user_spawn_id" -re "(\[\[:print:]]+)(\n)" {
		print2log $logfile "--> $expect_out(1,string)"
		#send -h -i $gdb_id "$expect_out(1,string)\r"
		send -i $gdb_id "$expect_out(1,string)\r"
		sleep 0.001
		exp_continue
	}
}

#remove_nulls -i $spawn_id  1

#if {[info vars tty_spawn_id]} {
	# /dev/tty exists
#	puts $logfile "   isatty: $tty_spawn_id"
#} else {
	# /dev/tty doesn't exist
    # probably in cron, batch, or at script
#	puts $logfile "   /dev/tty doesn't exist"
#}

#expect "(gdb) "

#send_user $expect_out(buffer)
#sleep 10
#interact
